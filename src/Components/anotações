async function testBackEnd() {

        try {//tente executar as linhas de 25 até 37

            let retorno = await fetch('http://localhost:5000/users', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            });
            // let json = await retorno.json();
            console.log(retorno);

            return retorno;

        } catch (error) { //em caso de erro, faça um print do erro
            console.error(error);
        }
    }




CADASTRO FUNCAO

async function sendInput() {

        try {//tente executar as linhas de 25 até 37

            let retorno = await fetch('http://localhost:5000/users/cadastro', {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },

                body: JSON.stringify(
                    {
                        login: login, //variavel de estado
                        senha : senha,//variavel de estado
                        nome: nome, //variavel de estado
                        tipo: tipo, //variavel de estado
                        cpf:   cpf//variavel de estado
                    }
                    )
            });

            let json = await retorno.json()
            console.log(json);
            return retorno;
        } catch (error) { //em caso de erro, faça um print do erro
            console.er


import passwordValidator from 'password-validator';

var schema = new passwordValidator();
//     schema
//     .is().min(8)                                    // Minimum length 8
//     .is().max(100)                                  // Maximum length 100
//     .has().uppercase()                              // Must have uppercase letters
//     .has().lowercase()                              // Must have lowercase letters
//     .has().digits(2)                                // Must have at least 2 digits
//     .has().not().spaces()                           // Should not have spaces
//     .is().not().oneOf(['Passw0rd', 'Password123']); // Blacklist these values
//     return schema.validate(senha)
