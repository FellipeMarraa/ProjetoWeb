{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.5.2): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'button';\nconst VERSION = '4.5.2';\nconst DATA_KEY = 'bs.button';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst DATA_API_KEY = '.data-api';\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst CLASS_NAME_ACTIVE = 'active';\nconst CLASS_NAME_BUTTON = 'btn';\nconst CLASS_NAME_FOCUS = 'focus';\nconst SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^=\"button\"]';\nconst SELECTOR_DATA_TOGGLES = '[data-toggle=\"buttons\"]';\nconst SELECTOR_DATA_TOGGLE = '[data-toggle=\"button\"]';\nconst SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle=\"buttons\"] .btn';\nconst SELECTOR_INPUT = 'input:not([type=\"hidden\"])';\nconst SELECTOR_ACTIVE = '.active';\nconst SELECTOR_BUTTON = '.btn';\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;\nconst EVENT_FOCUS_BLUR_DATA_API = `focus${EVENT_KEY}${DATA_API_KEY} ` + `blur${EVENT_KEY}${DATA_API_KEY}`;\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`;\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Button {\n  constructor(element) {\n    this._element = element;\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  } // Public\n\n\n  toggle() {\n    let triggerChangeEvent = true;\n    let addAriaPressed = true;\n    const rootElement = $(this._element).closest(SELECTOR_DATA_TOGGLES)[0];\n\n    if (rootElement) {\n      const input = this._element.querySelector(SELECTOR_INPUT);\n\n      if (input) {\n        if (input.type === 'radio') {\n          if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n            triggerChangeEvent = false;\n          } else {\n            const activeElement = rootElement.querySelector(SELECTOR_ACTIVE);\n\n            if (activeElement) {\n              $(activeElement).removeClass(CLASS_NAME_ACTIVE);\n            }\n          }\n        }\n\n        if (triggerChangeEvent) {\n          // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input\n          if (input.type === 'checkbox' || input.type === 'radio') {\n            input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE);\n          }\n\n          $(input).trigger('change');\n        }\n\n        input.focus();\n        addAriaPressed = false;\n      }\n    }\n\n    if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {\n      if (addAriaPressed) {\n        this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE));\n      }\n\n      if (triggerChangeEvent) {\n        $(this._element).toggleClass(CLASS_NAME_ACTIVE);\n      }\n    }\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY);\n    this._element = null;\n  } // Static\n\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      let data = $(this).data(DATA_KEY);\n\n      if (!data) {\n        data = new Button(this);\n        $(this).data(DATA_KEY, data);\n      }\n\n      if (config === 'toggle') {\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$(document).on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n  let button = event.target;\n  const initialButton = button;\n\n  if (!$(button).hasClass(CLASS_NAME_BUTTON)) {\n    button = $(button).closest(SELECTOR_BUTTON)[0];\n  }\n\n  if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {\n    event.preventDefault(); // work around Firefox bug #1540995\n  } else {\n    const inputBtn = button.querySelector(SELECTOR_INPUT);\n\n    if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {\n      event.preventDefault(); // work around Firefox bug #1540995\n\n      return;\n    }\n\n    if (initialButton.tagName !== 'LABEL' || inputBtn && inputBtn.type !== 'checkbox') {\n      Button._jQueryInterface.call($(button), 'toggle');\n    }\n  }\n}).on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n  const button = $(event.target).closest(SELECTOR_BUTTON)[0];\n  $(button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type));\n});\n$(window).on(EVENT_LOAD_DATA_API, () => {\n  // ensure correct active class is set to match the controls' actual values/states\n  // find all checkboxes/readio buttons inside data-toggle groups\n  let buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS));\n\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i];\n    const input = button.querySelector(SELECTOR_INPUT);\n\n    if (input.checked || input.hasAttribute('checked')) {\n      button.classList.add(CLASS_NAME_ACTIVE);\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE);\n    }\n  } // find all button toggles\n\n\n  buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE));\n\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i];\n\n    if (button.getAttribute('aria-pressed') === 'true') {\n      button.classList.add(CLASS_NAME_ACTIVE);\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE);\n    }\n  }\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Button._jQueryInterface;\n$.fn[NAME].Constructor = Button;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Button._jQueryInterface;\n};\n\nexport default Button;","map":{"version":3,"sources":["/home/fellipemarra/Dev/Faculdade/ProjetoWeb/node_modules/bootstrap/js/src/button.js"],"names":["$","NAME","VERSION","DATA_KEY","EVENT_KEY","DATA_API_KEY","JQUERY_NO_CONFLICT","fn","CLASS_NAME_ACTIVE","CLASS_NAME_BUTTON","CLASS_NAME_FOCUS","SELECTOR_DATA_TOGGLE_CARROT","SELECTOR_DATA_TOGGLES","SELECTOR_DATA_TOGGLE","SELECTOR_DATA_TOGGLES_BUTTONS","SELECTOR_INPUT","SELECTOR_ACTIVE","SELECTOR_BUTTON","EVENT_CLICK_DATA_API","EVENT_FOCUS_BLUR_DATA_API","EVENT_LOAD_DATA_API","Button","constructor","element","_element","toggle","triggerChangeEvent","addAriaPressed","rootElement","closest","input","querySelector","type","checked","classList","contains","activeElement","removeClass","trigger","focus","hasAttribute","setAttribute","toggleClass","dispose","removeData","_jQueryInterface","config","each","data","document","on","event","button","target","initialButton","hasClass","preventDefault","inputBtn","tagName","call","test","window","buttons","slice","querySelectorAll","i","len","length","add","remove","getAttribute","Constructor","noConflict"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.5.2): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport $ from 'jquery'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME                = 'button'\nconst VERSION             = '4.5.2'\nconst DATA_KEY            = 'bs.button'\nconst EVENT_KEY           = `.${DATA_KEY}`\nconst DATA_API_KEY        = '.data-api'\nconst JQUERY_NO_CONFLICT  = $.fn[NAME]\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_BUTTON = 'btn'\nconst CLASS_NAME_FOCUS  = 'focus'\n\nconst SELECTOR_DATA_TOGGLE_CARROT   = '[data-toggle^=\"button\"]'\nconst SELECTOR_DATA_TOGGLES         = '[data-toggle=\"buttons\"]'\nconst SELECTOR_DATA_TOGGLE          = '[data-toggle=\"button\"]'\nconst SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle=\"buttons\"] .btn'\nconst SELECTOR_INPUT                = 'input:not([type=\"hidden\"])'\nconst SELECTOR_ACTIVE               = '.active'\nconst SELECTOR_BUTTON               = '.btn'\n\nconst EVENT_CLICK_DATA_API      = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_FOCUS_BLUR_DATA_API = `focus${EVENT_KEY}${DATA_API_KEY} ` +\n                          `blur${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_LOAD_DATA_API       = `load${EVENT_KEY}${DATA_API_KEY}`\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Button {\n  constructor(element) {\n    this._element = element\n  }\n\n  // Getters\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  // Public\n\n  toggle() {\n    let triggerChangeEvent = true\n    let addAriaPressed = true\n    const rootElement = $(this._element).closest(\n      SELECTOR_DATA_TOGGLES\n    )[0]\n\n    if (rootElement) {\n      const input = this._element.querySelector(SELECTOR_INPUT)\n\n      if (input) {\n        if (input.type === 'radio') {\n          if (input.checked &&\n            this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n            triggerChangeEvent = false\n          } else {\n            const activeElement = rootElement.querySelector(SELECTOR_ACTIVE)\n\n            if (activeElement) {\n              $(activeElement).removeClass(CLASS_NAME_ACTIVE)\n            }\n          }\n        }\n\n        if (triggerChangeEvent) {\n          // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input\n          if (input.type === 'checkbox' || input.type === 'radio') {\n            input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE)\n          }\n          $(input).trigger('change')\n        }\n\n        input.focus()\n        addAriaPressed = false\n      }\n    }\n\n    if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {\n      if (addAriaPressed) {\n        this._element.setAttribute('aria-pressed',\n          !this._element.classList.contains(CLASS_NAME_ACTIVE))\n      }\n\n      if (triggerChangeEvent) {\n        $(this._element).toggleClass(CLASS_NAME_ACTIVE)\n      }\n    }\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY)\n    this._element = null\n  }\n\n  // Static\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      let data = $(this).data(DATA_KEY)\n\n      if (!data) {\n        data = new Button(this)\n        $(this).data(DATA_KEY, data)\n      }\n\n      if (config === 'toggle') {\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n$(document)\n  .on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, (event) => {\n    let button = event.target\n    const initialButton = button\n\n    if (!$(button).hasClass(CLASS_NAME_BUTTON)) {\n      button = $(button).closest(SELECTOR_BUTTON)[0]\n    }\n\n    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {\n      event.preventDefault() // work around Firefox bug #1540995\n    } else {\n      const inputBtn = button.querySelector(SELECTOR_INPUT)\n\n      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {\n        event.preventDefault() // work around Firefox bug #1540995\n        return\n      }\n\n      if (initialButton.tagName !== 'LABEL' || inputBtn && inputBtn.type !== 'checkbox') {\n        Button._jQueryInterface.call($(button), 'toggle')\n      }\n    }\n  })\n  .on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, (event) => {\n    const button = $(event.target).closest(SELECTOR_BUTTON)[0]\n    $(button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type))\n  })\n\n$(window).on(EVENT_LOAD_DATA_API, () => {\n  // ensure correct active class is set to match the controls' actual values/states\n\n  // find all checkboxes/readio buttons inside data-toggle groups\n  let buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    const input = button.querySelector(SELECTOR_INPUT)\n    if (input.checked || input.hasAttribute('checked')) {\n      button.classList.add(CLASS_NAME_ACTIVE)\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n\n  // find all button toggles\n  buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    if (button.getAttribute('aria-pressed') === 'true') {\n      button.classList.add(CLASS_NAME_ACTIVE)\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n})\n\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Button._jQueryInterface\n$.fn[NAME].Constructor = Button\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT\n  return Button._jQueryInterface\n}\n\nexport default Button\n"]},"metadata":{},"sourceType":"module"}